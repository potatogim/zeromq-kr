[[div class="code"]]
[[span style="color:#408080"]][[span style="font-style:italic"]]/*{{@@  @@}}=====================================================================
{{@@    @@}}kvmsg - key-value message class for example applications

{{@@    @@}}@@---------------------------------------------------------------------@@
{{@@    @@}}Copyright (c) 1991-2011 iMatix Corporation <www.imatix.com>
{{@@    @@}}Copyright other contributors as noted in the AUTHORS file.

{{@@    @@}}This file is part of the ZeroMQ Guide: http:@@//@@zguide.zeromq.org

{{@@    @@}}This is free software; you can redistribute it and/or modify it under
{{@@    @@}}the terms of the GNU Lesser General Public License as published by
{{@@    @@}}the Free Software Foundation; either version 3 of the License, or (at
{{@@    @@}}your option) any later version.

{{@@    @@}}This software is distributed in the hope that it will be useful, but
{{@@    @@}}WITHOUT ANY WARRANTY; without even the implied warranty of
{{@@    @@}}MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
{{@@    @@}}Lesser General Public License for more details.

{{@@    @@}}You should have received a copy of the GNU Lesser General Public
{{@@    @@}}License along with this program. If not, see
{{@@    @@}}<http:@@//@@www.gnu.org/licenses/>.
{{@@    @@}}=====================================================================
*/[[/span]][[/span]]
[[span style="color:#BC7A00"]]
#include "kvmsg.h"
#include <uuid/uuid.h>
#include "zlist.h"[[/span]]

[[span style="color:#408080"]]//@@//@@{{@@  @@}}Keys are short strings//[[/span]]
[[span style="color:#BC7A00"]]#define KVMSG_KEY_MAX{{@@   @@}}255[[/span]]

[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}Message is formatted on wire as 4 frames:
@@//@@{{@@  @@}}frame 0: key (0MQ string)
@@//@@{{@@  @@}}frame 1: sequence (8 bytes, network order)
@@//@@{{@@  @@}}frame 2: uuid (blob, 16 bytes)
@@//@@{{@@  @@}}frame 3: properties (0MQ string)
@@//@@{{@@  @@}}frame 4: body (blob)[[/span]][[/span]]
[[span style="color:#BC7A00"]]#define FRAME_KEY{{@@       @@}}0
#define FRAME_SEQ{{@@       @@}}1
#define FRAME_UUID{{@@      @@}}2
#define FRAME_PROPS{{@@     @@}}3
#define FRAME_BODY{{@@      @@}}4
#define KVMSG_FRAMES{{@@    @@}}5[[/span]]

[[span style="color:#408080"]]//@@//@@{{@@  @@}}Structure of our class//[[/span]]
[[span style="color:#008000"]]**struct**[[/span]] _kvmsg {
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Presence indicators for each frame//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] present @@[@@KVMSG_FRAMES@@]@@;
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Corresponding 0MQ message frames, if any//[[/span]]
{{@@    @@}}zmq_msg_t frame @@[@@KVMSG_FRAMES@@]@@;
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Key, copied into safe C string//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] key @@[@@KVMSG_KEY_MAX [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]]@@]@@;
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}List of properties, as name=value strings//[[/span]]
{{@@    @@}}zlist_t [[span style="color:#666666"]]*[[/span]]props;
{{@@    @@}}[[span style="color:#B00040"]]size_t[[/span]] props_size;
};


[[span style="color:#408080"]]//@@//@@{{@@  @@}}Serialize list of properties to a message frame//[[/span]]
[[span style="color:#008000"]]**static**[[/span]] [[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]s_encode_props[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_PROPS@@]@@;
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_PROPS@@]@@)
{{@@        @@}}zmq_msg_close (msg);

{{@@    @@}}zmq_msg_init_size (msg, self[[span style="color:#666666"]]->[[/span]]props_size);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]prop [[span style="color:#666666"]]=[[/span]] zlist_first (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]dest [[span style="color:#666666"]]=[[/span]] ([[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]) zmq_msg_data (msg);
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (prop) {
{{@@        @@}}strcpy (dest, prop);
{{@@        @@}}dest [[span style="color:#666666"]]+=[[/span]] strlen (prop);
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]dest[[span style="color:#666666"]]++[[/span]] [[span style="color:#666666"]]=[[/span]] [[span style="color:#BA2121"]]'\n'[[/span]];
{{@@        @@}}prop [[span style="color:#666666"]]=[[/span]] zlist_next (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}}
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_PROPS@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
}

[[span style="color:#408080"]]//@@//@@{{@@  @@}}Rebuild properties list from message frame//[[/span]]
[[span style="color:#008000"]]**static**[[/span]] [[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]s_decode_props[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_PROPS@@]@@;
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]props_size [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]];
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (zlist_size (self[[span style="color:#666666"]]->[[/span]]props))
{{@@        @@}}free (zlist_pop (self[[span style="color:#666666"]]->[[/span]]props));

{{@@    @@}}[[span style="color:#B00040"]]size_t[[/span]] remainder [[span style="color:#666666"]]=[[/span]] zmq_msg_size (msg);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]prop [[span style="color:#666666"]]=[[/span]] ([[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]) zmq_msg_data (msg);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]eoln [[span style="color:#666666"]]=[[/span]] memchr (prop, [[span style="color:#BA2121"]]'\n'[[/span]], remainder);
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (eoln) {
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]eoln [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]];
{{@@        @@}}zlist_append (self[[span style="color:#666666"]]->[[/span]]props, strdup (prop));
{{@@        @@}}self[[span style="color:#666666"]]->[[/span]]props_size [[span style="color:#666666"]]+=[[/span]] strlen (prop) [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}remainder [[span style="color:#666666"]]-=[[/span]] strlen (prop) [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}prop [[span style="color:#666666"]]=[[/span]] eoln [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}eoln [[span style="color:#666666"]]=[[/span]] memchr (prop, [[span style="color:#BA2121"]]'\n'[[/span]], remainder);
{{@@    @@}}}
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Constructor, sets sequence as provided[[/span]][[/span]]

kvmsg_t [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_new[[/span]] ([[span style="color:#B00040"]]int64_t[[/span]] sequence)
{
{{@@    @@}}kvmsg_t
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]self;

{{@@    @@}}self [[span style="color:#666666"]]=[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]) zmalloc ([[span style="color:#008000"]]**sizeof**[[/span]] (kvmsg_t));
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]props [[span style="color:#666666"]]=[[/span]] zlist_new ();
{{@@    @@}}kvmsg_set_sequence (self, sequence);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] self;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Destructor[[/span]][[/span]]

[[span style="color:#408080"]]//@@//@@{{@@  @@}}Free shim, compatible with zhash_free_fn//[[/span]]
[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_free[[/span]] ([[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]ptr)
{
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (ptr) {
{{@@        @@}}kvmsg_t [[span style="color:#666666"]]*[[/span]]self [[span style="color:#666666"]]=[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]) ptr;
{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Destroy message frames if any//[[/span]]
{{@@        @@}}[[span style="color:#B00040"]]int[[/span]] frame_nbr;
{{@@        @@}}[[span style="color:#008000"]]**for**[[/span]] (frame_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES; frame_nbr[[span style="color:#666666"]]++[[/span]])
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@)
{{@@                @@}}zmq_msg_close ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@);

{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Destroy property list//[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**while**[[/span]] (zlist_size (self[[span style="color:#666666"]]->[[/span]]props))
{{@@            @@}}free (zlist_pop (self[[span style="color:#666666"]]->[[/span]]props));
{{@@        @@}}zlist_destroy ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]props);

{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Free object itself//[[/span]]
{{@@        @@}}free (self);
{{@@    @@}}}
}

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_destroy[[/span]] (kvmsg_t [[span style="color:#666666"]]@@**@@[[/span]]self_p)
{
{{@@    @@}}assert (self_p);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]*[[/span]]self_p) {
{{@@        @@}}kvmsg_free ([[span style="color:#666666"]]*[[/span]]self_p);
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]self_p [[span style="color:#666666"]]=[[/span]] [[span style="color:#008000"]]NULL[[/span]];
{{@@    @@}}}
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Create duplicate of kvmsg[[/span]][[/span]]

kvmsg_t [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_dup[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}kvmsg_t [[span style="color:#666666"]]*[[/span]]kvmsg [[span style="color:#666666"]]=[[/span]] kvmsg_new ([[span style="color:#666666"]]0[[/span]]);
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] frame_nbr;
{{@@    @@}}[[span style="color:#008000"]]**for**[[/span]] (frame_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES; frame_nbr[[span style="color:#666666"]]++[[/span]]) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@) {
{{@@            @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]src [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@;
{{@@            @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]dst [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]kvmsg[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@;
{{@@            @@}}zmq_msg_init_size (dst, zmq_msg_size (src));
{{@@            @@}}memcpy (zmq_msg_data (dst),
{{@@                    @@}}zmq_msg_data (src), zmq_msg_size (src));
{{@@            @@}}kvmsg[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}}
{{@@    @@}}}
{{@@    @@}}kvmsg[[span style="color:#666666"]]->[[/span]]props [[span style="color:#666666"]]=[[/span]] zlist_copy (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] kvmsg;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Reads key-value message from socket, returns new kvmsg instance.[[/span]][[/span]]

kvmsg_t [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_recv[[/span]] ([[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]socket)
{
{{@@    @@}}assert (socket);
{{@@    @@}}kvmsg_t [[span style="color:#666666"]]*[[/span]]self [[span style="color:#666666"]]=[[/span]] kvmsg_new ([[span style="color:#666666"]]0[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Read all frames off the wire, reject if bogus//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] frame_nbr;
{{@@    @@}}[[span style="color:#008000"]]**for**[[/span]] (frame_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES; frame_nbr[[span style="color:#666666"]]++[[/span]]) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@)
{{@@            @@}}zmq_msg_close ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@);
{{@@        @@}}zmq_msg_init ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@);
{{@@        @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (zmq_recvmsg (socket, [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@, [[span style="color:#666666"]]0[[/span]]) [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]-[[/span]][[span style="color:#666666"]]1[[/span]]) {
{{@@            @@}}kvmsg_destroy ([[span style="color:#666666"]]&[[/span]]self);
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];
{{@@        @@}}}
{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Verify multipart framing//[[/span]]
{{@@        @@}}[[span style="color:#B00040"]]int[[/span]] rcvmore [[span style="color:#666666"]]=[[/span]] (frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES [[span style="color:#666666"]]-[[/span]] [[span style="color:#666666"]]1[[/span]])[[span style="color:#666666"]]?[[/span]] [[span style="color:#666666"]]1[[/span]][[span style="color:#666666"]]:[[/span]] [[span style="color:#666666"]]0[[/span]];
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (zsockopt_rcvmore (socket) [[span style="color:#666666"]]!=[[/span]] rcvmore) {
{{@@            @@}}kvmsg_destroy ([[span style="color:#666666"]]&[[/span]]self);
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];
{{@@        @@}}}
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self)
{{@@        @@}}s_decode_props (self);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] self;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Send key-value message to socket; any empty frames are sent as such.[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_send[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]socket)
{
{{@@    @@}}assert (self);
{{@@    @@}}assert (socket);

{{@@    @@}}s_encode_props (self);
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] frame_nbr;
{{@@    @@}}[[span style="color:#008000"]]**for**[[/span]] (frame_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES; frame_nbr[[span style="color:#666666"]]++[[/span]]) {
{{@@        @@}}zmq_msg_t copy;
{{@@        @@}}zmq_msg_init ([[span style="color:#666666"]]&[[/span]]copy);
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@frame_nbr@@]@@)
{{@@            @@}}zmq_msg_copy ([[span style="color:#666666"]]&[[/span]]copy, [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@frame_nbr@@]@@);
{{@@        @@}}zmq_sendmsg (socket, [[span style="color:#666666"]]&[[/span]]copy,
{{@@            @@}}(frame_nbr [[span style="color:#666666"]]<[[/span]] KVMSG_FRAMES [[span style="color:#666666"]]-[[/span]] [[span style="color:#666666"]]1[[/span]])[[span style="color:#666666"]]?[[/span]] ZMQ_SNDMORE[[span style="color:#666666"]]:[[/span]] [[span style="color:#666666"]]0[[/span]]);
{{@@        @@}}zmq_msg_close ([[span style="color:#666666"]]&[[/span]]copy);
{{@@    @@}}}
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Return key from last read message, if any, else NULL[[/span]][[/span]]

[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_key[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_KEY@@]@@) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]!*[[/span]]self[[span style="color:#666666"]]->[[/span]]key) {
{{@@            @@}}[[span style="color:#B00040"]]size_t[[/span]] size [[span style="color:#666666"]]=[[/span]] zmq_msg_size ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_KEY@@]@@);
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (size [[span style="color:#666666"]]>[[/span]] KVMSG_KEY_MAX)
{{@@                @@}}size [[span style="color:#666666"]]=[[/span]] KVMSG_KEY_MAX;
{{@@            @@}}memcpy (self[[span style="color:#666666"]]->[[/span]]key,
{{@@                @@}}zmq_msg_data ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_KEY@@]@@), size);
{{@@            @@}}self[[span style="color:#666666"]]->[[/span]]key @@[@@size@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]];
{{@@        @@}}}
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] self[[span style="color:#666666"]]->[[/span]]key;
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#008000"]]NULL[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Return sequence nbr from last read message, if any[[/span]][[/span]]

[[span style="color:#B00040"]]int64_t[[/span]]
[[span style="color:#0000FF"]]kvmsg_sequence[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_SEQ@@]@@) {
{{@@        @@}}assert (zmq_msg_size ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_SEQ@@]@@) [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]8[[/span]]);
{{@@        @@}}byte [[span style="color:#666666"]]*[[/span]]source [[span style="color:#666666"]]=[[/span]] zmq_msg_data ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_SEQ@@]@@);
{{@@        @@}}[[span style="color:#B00040"]]int64_t[[/span]] sequence [[span style="color:#666666"]]=[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]0[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]56[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]1[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]48[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]2[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]40[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]3[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]32[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]4[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]24[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]5[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]16[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]] (([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]6[[/span]]@@]@@) [[span style="color:#666666"]]@@<<@@[[/span]] [[span style="color:#666666"]]8[[/span]])
{{@@                         @@}}[[span style="color:#666666"]]+[[/span]]{{@@  @@}}([[span style="color:#B00040"]]int64_t[[/span]]) (source @@[@@[[span style="color:#666666"]]7[[/span]]@@]@@);
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] sequence;
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#666666"]]0[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Return UUID from last read message, if any, else NULL[[/span]][[/span]]

byte [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_uuid[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_UUID@@]@@
{{@@    @@}}[[span style="color:#666666"]]&&[[/span]]{{@@  @@}}zmq_msg_size ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_UUID@@]@@) [[span style="color:#666666"]]==[[/span]] [[span style="color:#008000"]]**sizeof**[[/span]] (uuid_t))
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] (byte [[span style="color:#666666"]]*[[/span]]) zmq_msg_data ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_UUID@@]@@);
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#008000"]]NULL[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Return body from last read message, if any, else NULL[[/span]][[/span]]

byte [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_body[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_BODY@@]@@)
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] (byte [[span style="color:#666666"]]*[[/span]]) zmq_msg_data ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_BODY@@]@@);
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#008000"]]NULL[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Return body size from last read message, if any, else zero[[/span]][[/span]]

[[span style="color:#B00040"]]size_t[[/span]]
[[span style="color:#0000FF"]]kvmsg_size[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_BODY@@]@@)
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] zmq_msg_size ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_BODY@@]@@);
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#666666"]]0[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message key as provided[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_set_key[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]key)
{
{{@@    @@}}assert (self);
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_KEY@@]@@;
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_KEY@@]@@)
{{@@        @@}}zmq_msg_close (msg);
{{@@    @@}}zmq_msg_init_size (msg, strlen (key));
{{@@    @@}}memcpy (zmq_msg_data (msg), key, strlen (key));
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_KEY@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message sequence number[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_set_sequence[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]int64_t[[/span]] sequence)
{
{{@@    @@}}assert (self);
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_SEQ@@]@@;
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_SEQ@@]@@)
{{@@        @@}}zmq_msg_close (msg);
{{@@    @@}}zmq_msg_init_size (msg, [[span style="color:#666666"]]8[[/span]]);

{{@@    @@}}byte [[span style="color:#666666"]]*[[/span]]source [[span style="color:#666666"]]=[[/span]] zmq_msg_data (msg);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]0[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]56[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]1[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]48[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]2[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]40[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]3[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]32[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]4[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]24[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]5[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]16[[/span]]) [[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]6[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence [[span style="color:#666666"]]@@>>@@[[/span]] [[span style="color:#666666"]]8[[/span]]){{@@  @@}}[[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);
{{@@    @@}}source @@[@@[[span style="color:#666666"]]7[[/span]]@@]@@ [[span style="color:#666666"]]=[[/span]] (byte) ((sequence){{@@       @@}}[[span style="color:#666666"]]&[[/span]] [[span style="color:#666666"]]255[[/span]]);

{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_SEQ@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message UUID to generated value[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_set_uuid[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}assert (self);
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_UUID@@]@@;
{{@@    @@}}uuid_t uuid;
{{@@    @@}}uuid_generate (uuid);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_UUID@@]@@)
{{@@        @@}}zmq_msg_close (msg);
{{@@    @@}}zmq_msg_init_size (msg, [[span style="color:#008000"]]**sizeof**[[/span]] (uuid));
{{@@    @@}}memcpy (zmq_msg_data (msg), uuid, [[span style="color:#008000"]]**sizeof**[[/span]] (uuid));
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_UUID@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message body[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_set_body[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, byte [[span style="color:#666666"]]*[[/span]]body, [[span style="color:#B00040"]]size_t[[/span]] size)
{
{{@@    @@}}assert (self);
{{@@    @@}}zmq_msg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]frame @@[@@FRAME_BODY@@]@@;
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_BODY@@]@@)
{{@@        @@}}zmq_msg_close (msg);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_BODY@@]@@ [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@    @@}}zmq_msg_init_size (msg, size);
{{@@    @@}}memcpy (zmq_msg_data (msg), body, size);
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message key using printf format[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_fmt_key[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]format, ...)
{
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] value @@[@@KVMSG_KEY_MAX [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]]@@]@@;
{{@@    @@}}[[span style="color:#B00040"]]va_list[[/span]] args;

{{@@    @@}}assert (self);
{{@@    @@}}va_start (args, format);
{{@@    @@}}vsnprintf (value, KVMSG_KEY_MAX, format, args);
{{@@    @@}}va_end (args);
{{@@    @@}}kvmsg_set_key (self, value);
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message body using printf format[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_fmt_body[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]format, ...)
{
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] value @@[@@[[span style="color:#666666"]]255[[/span]] [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]]@@]@@;
{{@@    @@}}[[span style="color:#B00040"]]va_list[[/span]] args;

{{@@    @@}}assert (self);
{{@@    @@}}va_start (args, format);
{{@@    @@}}vsnprintf (value, [[span style="color:#666666"]]255[[/span]], format, args);
{{@@    @@}}va_end (args);
{{@@    @@}}kvmsg_set_body (self, (byte [[span style="color:#666666"]]*[[/span]]) value, strlen (value));
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Get message property, if set, else ""[[/span]][[/span]]

[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]kvmsg_get_prop[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]name)
{
{{@@    @@}}assert (strchr (name, [[span style="color:#BA2121"]]'='[[/span]]) [[span style="color:#666666"]]==[[/span]] [[span style="color:#008000"]]NULL[[/span]]);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]prop [[span style="color:#666666"]]=[[/span]] zlist_first (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}[[span style="color:#B00040"]]size_t[[/span]] namelen [[span style="color:#666666"]]=[[/span]] strlen (name);
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (prop) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (strlen (prop) [[span style="color:#666666"]]>[[/span]] namelen
{{@@        @@}}[[span style="color:#666666"]]&&[[/span]]{{@@  @@}}memcmp (prop, name, namelen) [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]0[[/span]]
{{@@        @@}}[[span style="color:#666666"]]&&[[/span]]{{@@  @@}}prop @@[@@namelen@@]@@ [[span style="color:#666666"]]==[[/span]] [[span style="color:#BA2121"]]'='[[/span]])
{{@@            @@}}[[span style="color:#008000"]]**return**[[/span]] prop [[span style="color:#666666"]]+[[/span]] namelen [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@        @@}}prop [[span style="color:#666666"]]=[[/span]] zlist_next (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#BA2121"]]""[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set message property
@@//@@{{@@  @@}}Names cannot contain '='. Max length of value is 255 chars.[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_set_prop[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]name, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]format, ...)
{
{{@@    @@}}assert (strchr (name, [[span style="color:#BA2121"]]'='[[/span]]) [[span style="color:#666666"]]==[[/span]] [[span style="color:#008000"]]NULL[[/span]]);

{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] value @@[@@[[span style="color:#666666"]]255[[/span]] [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]]@@]@@;
{{@@    @@}}[[span style="color:#B00040"]]va_list[[/span]] args;
{{@@    @@}}assert (self);
{{@@    @@}}va_start (args, format);
{{@@    @@}}vsnprintf (value, [[span style="color:#666666"]]255[[/span]], format, args);
{{@@    @@}}va_end (args);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Allocate name=value string//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]prop [[span style="color:#666666"]]=[[/span]] malloc (strlen (name) [[span style="color:#666666"]]+[[/span]] strlen (value) [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]2[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Remove existing property if any//[[/span]]
{{@@    @@}}sprintf (prop, [[span style="color:#BA2121"]]"%s="[[/span]], name);
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]existing [[span style="color:#666666"]]=[[/span]] zlist_first (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (existing) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (memcmp (prop, existing, strlen (prop)) [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]0[[/span]]) {
{{@@            @@}}self[[span style="color:#666666"]]->[[/span]]props_size [[span style="color:#666666"]]-=[[/span]] strlen (existing) [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@            @@}}zlist_remove (self[[span style="color:#666666"]]->[[/span]]props, existing);
{{@@            @@}}free (existing);
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];
{{@@        @@}}}
{{@@        @@}}existing [[span style="color:#666666"]]=[[/span]] zlist_next (self[[span style="color:#666666"]]->[[/span]]props);
{{@@    @@}}}
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Add new name=value property string//[[/span]]
{{@@    @@}}strcat (prop, value);
{{@@    @@}}zlist_append (self[[span style="color:#666666"]]->[[/span]]props, prop);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]props_size [[span style="color:#666666"]]+=[[/span]] strlen (prop) [[span style="color:#666666"]]+[[/span]] [[span style="color:#666666"]]1[[/span]];
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Store entire kvmsg into hash map, if key/value are set.
@@//@@{{@@  @@}}Nullifies kvmsg reference, and destroys automatically when no longer
@@//@@{{@@  @@}}needed. If value is empty, deletes any previous value from store.[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_store[[/span]] (kvmsg_t [[span style="color:#666666"]]@@**@@[[/span]]self_p, zhash_t [[span style="color:#666666"]]*[[/span]]hash)
{
{{@@    @@}}assert (self_p);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]*[[/span]]self_p) {
{{@@        @@}}kvmsg_t [[span style="color:#666666"]]*[[/span]]self [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]*[[/span]]self_p;
{{@@        @@}}assert (self);
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (kvmsg_size (self)) {
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_KEY@@]@@
{{@@            @@}}[[span style="color:#666666"]]&&[[/span]]{{@@  @@}}self[[span style="color:#666666"]]->[[/span]]present @@[@@FRAME_BODY@@]@@) {
{{@@                @@}}zhash_update (hash, kvmsg_key (self), self);
{{@@                @@}}zhash_freefn (hash, kvmsg_key (self), kvmsg_free);
{{@@            @@}}}
{{@@        @@}}}
{{@@        @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@            @@}}zhash_delete (hash, kvmsg_key (self));

{{@@        @@}}[[span style="color:#666666"]]*[[/span]]self_p [[span style="color:#666666"]]=[[/span]] [[span style="color:#008000"]]NULL[[/span]];
{{@@    @@}}}
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Dump message to stderr, for debugging and tracing[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]kvmsg_dump[[/span]] (kvmsg_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self) {
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]![[/span]]self) {
{{@@            @@}}fprintf (stderr, [[span style="color:#BA2121"]]"NULL"[[/span]]);
{{@@            @@}}[[span style="color:#008000"]]**return**[[/span]];
{{@@        @@}}}
{{@@        @@}}[[span style="color:#B00040"]]size_t[[/span]] size [[span style="color:#666666"]]=[[/span]] kvmsg_size (self);
{{@@        @@}}byte{{@@  @@}}[[span style="color:#666666"]]*[[/span]]body [[span style="color:#666666"]]=[[/span]] kvmsg_body (self);
{{@@        @@}}fprintf (stderr, [[span style="color:#BA2121"]]"@@[@@seq:%"[[/span]] PRId64 [[span style="color:#BA2121"]]"@@]@@"[[/span]], kvmsg_sequence (self));
{{@@        @@}}fprintf (stderr, [[span style="color:#BA2121"]]"@@[@@key:%s@@]@@"[[/span]], kvmsg_key (self));
{{@@        @@}}fprintf (stderr, [[span style="color:#BA2121"]]"@@[@@size:%zd@@]@@ "[[/span]], size);
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (zlist_size (self[[span style="color:#666666"]]->[[/span]]props)) {
{{@@            @@}}fprintf (stderr, [[span style="color:#BA2121"]]"@@[@@"[[/span]]);
{{@@            @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]prop [[span style="color:#666666"]]=[[/span]] zlist_first (self[[span style="color:#666666"]]->[[/span]]props);
{{@@            @@}}[[span style="color:#008000"]]**while**[[/span]] (prop) {
{{@@                @@}}fprintf (stderr, [[span style="color:#BA2121"]]"%s;"[[/span]], prop);
{{@@                @@}}prop [[span style="color:#666666"]]=[[/span]] zlist_next (self[[span style="color:#666666"]]->[[/span]]props);
{{@@            @@}}}
{{@@            @@}}fprintf (stderr, [[span style="color:#BA2121"]]"@@]@@"[[/span]]);
{{@@        @@}}}
{{@@        @@}}[[span style="color:#B00040"]]int[[/span]] char_nbr;
{{@@        @@}}[[span style="color:#008000"]]**for**[[/span]] (char_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; char_nbr [[span style="color:#666666"]]<[[/span]] size; char_nbr[[span style="color:#666666"]]++[[/span]])
{{@@            @@}}fprintf (stderr, [[span style="color:#BA2121"]]"%02X"[[/span]], body @@[@@char_nbr@@]@@);
{{@@        @@}}fprintf (stderr, [[span style="color:#BA2121"]]"[[/span]][[span style="color:#BB6622"]]**\n**[[/span]][[span style="color:#BA2121"]]"[[/span]]);
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}fprintf (stderr, [[span style="color:#BA2121"]]"NULL message[[/span]][[span style="color:#BB6622"]]**\n**[[/span]][[span style="color:#BA2121"]]"[[/span]]);
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Runs self test of class[[/span]][[/span]]

[[span style="color:#B00040"]]int[[/span]]
[[span style="color:#0000FF"]]kvmsg_test[[/span]] ([[span style="color:#B00040"]]int[[/span]] verbose)
{
{{@@    @@}}kvmsg_t
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]kvmsg;

{{@@    @@}}printf ([[span style="color:#BA2121"]]" * kvmsg: "[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Prepare our context and sockets//[[/span]]
{{@@    @@}}zctx_t [[span style="color:#666666"]]*[[/span]]ctx [[span style="color:#666666"]]=[[/span]] zctx_new ();
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]output [[span style="color:#666666"]]=[[/span]] zsocket_new (ctx, ZMQ_DEALER);
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] rc [[span style="color:#666666"]]=[[/span]] zmq_bind (output, [[span style="color:#BA2121"]]"ipc:@@//@@kvmsg_selftest.ipc"[[/span]]);
{{@@    @@}}assert (rc [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]0[[/span]]);
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]input [[span style="color:#666666"]]=[[/span]] zsocket_new (ctx, ZMQ_DEALER);
{{@@    @@}}rc [[span style="color:#666666"]]=[[/span]] zmq_connect (input, [[span style="color:#BA2121"]]"ipc:@@//@@kvmsg_selftest.ipc"[[/span]]);
{{@@    @@}}assert (rc [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]0[[/span]]);

{{@@    @@}}zhash_t [[span style="color:#666666"]]*[[/span]]kvmap [[span style="color:#666666"]]=[[/span]] zhash_new ();

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Test send and receive of simple message//[[/span]]
{{@@    @@}}kvmsg [[span style="color:#666666"]]=[[/span]] kvmsg_new ([[span style="color:#666666"]]1[[/span]]);
{{@@    @@}}kvmsg_set_key{{@@  @@}}(kvmsg, [[span style="color:#BA2121"]]"key"[[/span]]);
{{@@    @@}}kvmsg_set_uuid (kvmsg);
{{@@    @@}}kvmsg_set_body (kvmsg, (byte [[span style="color:#666666"]]*[[/span]]) [[span style="color:#BA2121"]]"body"[[/span]], [[span style="color:#666666"]]4[[/span]]);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (verbose)
{{@@        @@}}kvmsg_dump (kvmsg);
{{@@    @@}}kvmsg_send (kvmsg, output);
{{@@    @@}}kvmsg_store ([[span style="color:#666666"]]&[[/span]]kvmsg, kvmap);

{{@@    @@}}kvmsg [[span style="color:#666666"]]=[[/span]] kvmsg_recv (input);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (verbose)
{{@@        @@}}kvmsg_dump (kvmsg);
{{@@    @@}}assert (streq (kvmsg_key (kvmsg), [[span style="color:#BA2121"]]"key"[[/span]]));
{{@@    @@}}kvmsg_store ([[span style="color:#666666"]]&[[/span]]kvmsg, kvmap);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Test send and receive of message with properties//[[/span]]
{{@@    @@}}kvmsg [[span style="color:#666666"]]=[[/span]] kvmsg_new ([[span style="color:#666666"]]2[[/span]]);
{{@@    @@}}kvmsg_set_prop (kvmsg, [[span style="color:#BA2121"]]"prop1"[[/span]], [[span style="color:#BA2121"]]"value1"[[/span]]);
{{@@    @@}}kvmsg_set_prop (kvmsg, [[span style="color:#BA2121"]]"prop2"[[/span]], [[span style="color:#BA2121"]]"value1"[[/span]]);
{{@@    @@}}kvmsg_set_prop (kvmsg, [[span style="color:#BA2121"]]"prop2"[[/span]], [[span style="color:#BA2121"]]"value2"[[/span]]);
{{@@    @@}}kvmsg_set_key{{@@  @@}}(kvmsg, [[span style="color:#BA2121"]]"key"[[/span]]);
{{@@    @@}}kvmsg_set_uuid (kvmsg);
{{@@    @@}}kvmsg_set_body (kvmsg, (byte [[span style="color:#666666"]]*[[/span]]) [[span style="color:#BA2121"]]"body"[[/span]], [[span style="color:#666666"]]4[[/span]]);
{{@@    @@}}assert (streq (kvmsg_get_prop (kvmsg, [[span style="color:#BA2121"]]"prop2"[[/span]]), [[span style="color:#BA2121"]]"value2"[[/span]]));
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (verbose)
{{@@        @@}}kvmsg_dump (kvmsg);
{{@@    @@}}kvmsg_send (kvmsg, output);
{{@@    @@}}kvmsg_destroy ([[span style="color:#666666"]]&[[/span]]kvmsg);

{{@@    @@}}kvmsg [[span style="color:#666666"]]=[[/span]] kvmsg_recv (input);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (verbose)
{{@@        @@}}kvmsg_dump (kvmsg);
{{@@    @@}}assert (streq (kvmsg_key (kvmsg), [[span style="color:#BA2121"]]"key"[[/span]]));
{{@@    @@}}assert (streq (kvmsg_get_prop (kvmsg, [[span style="color:#BA2121"]]"prop2"[[/span]]), [[span style="color:#BA2121"]]"value2"[[/span]]));
{{@@    @@}}kvmsg_destroy ([[span style="color:#666666"]]&[[/span]]kvmsg);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Shutdown and destroy all objects//[[/span]]
{{@@    @@}}zhash_destroy ([[span style="color:#666666"]]&[[/span]]kvmap);
{{@@    @@}}zctx_destroy ([[span style="color:#666666"]]&[[/span]]ctx);

{{@@    @@}}printf ([[span style="color:#BA2121"]]"OK[[/span]][[span style="color:#BB6622"]]**\n**[[/span]][[span style="color:#BA2121"]]"[[/span]]);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#666666"]]0[[/span]];
}
[[/div]]