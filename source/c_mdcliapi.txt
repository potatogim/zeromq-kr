[[div class="code"]]
[[span style="color:#408080"]][[span style="font-style:italic"]]/*{{@@  @@}}=====================================================================
{{@@    @@}}mdcliapi.c

{{@@    @@}}Majordomo Protocol Client API
{{@@    @@}}Implements the MDP/Worker spec at http:@@//@@rfc.zeromq.org/spec:7.

{{@@    @@}}@@---------------------------------------------------------------------@@
{{@@    @@}}Copyright (c) 1991-2011 iMatix Corporation <www.imatix.com>
{{@@    @@}}Copyright other contributors as noted in the AUTHORS file.

{{@@    @@}}This file is part of the ZeroMQ Guide: http:@@//@@zguide.zeromq.org

{{@@    @@}}This is free software; you can redistribute it and/or modify it under
{{@@    @@}}the terms of the GNU Lesser General Public License as published by
{{@@    @@}}the Free Software Foundation; either version 3 of the License, or (at
{{@@    @@}}your option) any later version.

{{@@    @@}}This software is distributed in the hope that it will be useful, but
{{@@    @@}}WITHOUT ANY WARRANTY; without even the implied warranty of
{{@@    @@}}MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
{{@@    @@}}Lesser General Public License for more details.

{{@@    @@}}You should have received a copy of the GNU Lesser General Public
{{@@    @@}}License along with this program. If not, see
{{@@    @@}}<http:@@//@@www.gnu.org/licenses/>.
{{@@    @@}}=====================================================================
*/[[/span]][[/span]]
[[span style="color:#BC7A00"]]
#include "mdcliapi.h"[[/span]]

[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}Structure of our class
@@//@@{{@@  @@}}We access these properties only via class methods[[/span]][[/span]]

[[span style="color:#008000"]]**struct**[[/span]] _mdcli_t {
{{@@    @@}}zctx_t [[span style="color:#666666"]]*[[/span]]ctx;{{@@                @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Our context//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]broker;
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]client;{{@@               @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Socket to broker//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] verbose;{{@@                @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Print activity to stdout//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] timeout;{{@@                @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Request timeout//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] retries;{{@@                @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Request retries//[[/span]]
};


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Connect or reconnect to broker[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]] [[span style="color:#0000FF"]]s_mdcli_connect_to_broker[[/span]] (mdcli_t [[span style="color:#666666"]]*[[/span]]self)
{
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]client)
{{@@        @@}}zsocket_destroy (self[[span style="color:#666666"]]->[[/span]]ctx, self[[span style="color:#666666"]]->[[/span]]client);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]client [[span style="color:#666666"]]=[[/span]] zsocket_new (self[[span style="color:#666666"]]->[[/span]]ctx, ZMQ_REQ);
{{@@    @@}}zmq_connect (self[[span style="color:#666666"]]->[[/span]]client, self[[span style="color:#666666"]]->[[/span]]broker);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]verbose)
{{@@        @@}}zclock_log ([[span style="color:#BA2121"]]"I: connecting to broker at %s..."[[/span]], self[[span style="color:#666666"]]->[[/span]]broker);
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Constructor[[/span]][[/span]]

mdcli_t [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]mdcli_new[[/span]] ([[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]broker, [[span style="color:#B00040"]]int[[/span]] verbose)
{
{{@@    @@}}assert (broker);

{{@@    @@}}mdcli_t [[span style="color:#666666"]]*[[/span]]self [[span style="color:#666666"]]=[[/span]] (mdcli_t [[span style="color:#666666"]]*[[/span]]) zmalloc ([[span style="color:#008000"]]**sizeof**[[/span]] (mdcli_t));
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]ctx [[span style="color:#666666"]]=[[/span]] zctx_new ();
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]broker [[span style="color:#666666"]]=[[/span]] strdup (broker);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]verbose [[span style="color:#666666"]]=[[/span]] verbose;
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]timeout [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]2500[[/span]];{{@@           @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}msecs//[[/span]]
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]retries [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]3[[/span]];{{@@              @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Before we abandon//[[/span]]

{{@@    @@}}s_mdcli_connect_to_broker (self);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] self;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Destructor[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]mdcli_destroy[[/span]] (mdcli_t [[span style="color:#666666"]]@@**@@[[/span]]self_p)
{
{{@@    @@}}assert (self_p);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]*[[/span]]self_p) {
{{@@        @@}}mdcli_t [[span style="color:#666666"]]*[[/span]]self [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]*[[/span]]self_p;
{{@@        @@}}zctx_destroy ([[span style="color:#666666"]]&[[/span]]self[[span style="color:#666666"]]->[[/span]]ctx);
{{@@        @@}}free (self[[span style="color:#666666"]]->[[/span]]broker);
{{@@        @@}}free (self);
{{@@        @@}}[[span style="color:#666666"]]*[[/span]]self_p [[span style="color:#666666"]]=[[/span]] [[span style="color:#008000"]]NULL[[/span]];
{{@@    @@}}}
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set request timeout[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]mdcli_set_timeout[[/span]] (mdcli_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]int[[/span]] timeout)
{
{{@@    @@}}assert (self);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]timeout [[span style="color:#666666"]]=[[/span]] timeout;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Set request retries[[/span]][[/span]]

[[span style="color:#B00040"]]void[[/span]]
[[span style="color:#0000FF"]]mdcli_set_retries[[/span]] (mdcli_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]int[[/span]] retries)
{
{{@@    @@}}assert (self);
{{@@    @@}}self[[span style="color:#666666"]]->[[/span]]retries [[span style="color:#666666"]]=[[/span]] retries;
}


[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Send request to broker and get reply by hook or crook
@@//@@{{@@  @@}}Takes ownership of request message and destroys it when sent.
@@//@@{{@@  @@}}Returns the reply message or NULL if there was no reply.[[/span]][[/span]]

zmsg_t [[span style="color:#666666"]]*[[/span]]
[[span style="color:#0000FF"]]mdcli_send[[/span]] (mdcli_t [[span style="color:#666666"]]*[[/span]]self, [[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]service, zmsg_t [[span style="color:#666666"]]@@**@@[[/span]]request_p)
{
{{@@    @@}}assert (self);
{{@@    @@}}assert (request_p);
{{@@    @@}}zmsg_t [[span style="color:#666666"]]*[[/span]]request [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]*[[/span]]request_p;

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Prefix request with protocol frames//[[/span]]
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Frame 1: "MDPCxy" (six bytes, MDP/Client x.y)//[[/span]]
{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Frame 2: Service name (printable string)//[[/span]]
{{@@    @@}}zmsg_pushstr (request, service);
{{@@    @@}}zmsg_pushstr (request, MDPC_CLIENT);
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]verbose) {
{{@@        @@}}zclock_log ([[span style="color:#BA2121"]]"I: send request to '%s' service:"[[/span]], service);
{{@@        @@}}zmsg_dump (request);
{{@@    @@}}}

{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] retries_left [[span style="color:#666666"]]=[[/span]] self[[span style="color:#666666"]]->[[/span]]retries;
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] (retries_left [[span style="color:#666666"]]&&[[/span]] [[span style="color:#666666"]]![[/span]]zctx_interrupted) {
{{@@        @@}}zmsg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] zmsg_dup (request);
{{@@        @@}}zmsg_send ([[span style="color:#666666"]]&[[/span]]msg, self[[span style="color:#666666"]]->[[/span]]client);

{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Poll socket for a reply, with timeout//[[/span]]
{{@@        @@}}zmq_pollitem_t items @@[]@@ [[span style="color:#666666"]]=[[/span]] {
{{@@            @@}}{ self[[span style="color:#666666"]]->[[/span]]client, [[span style="color:#666666"]]0[[/span]], ZMQ_POLLIN, [[span style="color:#666666"]]0[[/span]] } };
{{@@        @@}}[[span style="color:#B00040"]]int[[/span]] rc [[span style="color:#666666"]]=[[/span]] zmq_poll (items, [[span style="color:#666666"]]1[[/span]], self[[span style="color:#666666"]]->[[/span]]timeout [[span style="color:#666666"]]*[[/span]] ZMQ_POLL_MSEC);
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (rc [[span style="color:#666666"]]==[[/span]] [[span style="color:#666666"]]-[[/span]][[span style="color:#666666"]]1[[/span]])
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];{{@@          @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Interrupted//[[/span]]

{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}If we got a reply, process it//[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (items @@[@@[[span style="color:#666666"]]0[[/span]]@@]@@.revents [[span style="color:#666666"]]&[[/span]] ZMQ_POLLIN) {
{{@@            @@}}zmsg_t [[span style="color:#666666"]]*[[/span]]msg [[span style="color:#666666"]]=[[/span]] zmsg_recv (self[[span style="color:#666666"]]->[[/span]]client);
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]verbose) {
{{@@                @@}}zclock_log ([[span style="color:#BA2121"]]"I: received reply:"[[/span]]);
{{@@                @@}}zmsg_dump (msg);
{{@@            @@}}}
{{@@            @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Don't try to handle errors, just assert noisily//[[/span]]
{{@@            @@}}assert (zmsg_size (msg) [[span style="color:#666666"]]>=[[/span]] [[span style="color:#666666"]]3[[/span]]);

{{@@            @@}}zframe_t [[span style="color:#666666"]]*[[/span]]header [[span style="color:#666666"]]=[[/span]] zmsg_pop (msg);
{{@@            @@}}assert (zframe_streq (header, MDPC_CLIENT));
{{@@            @@}}zframe_destroy ([[span style="color:#666666"]]&[[/span]]header);

{{@@            @@}}zframe_t [[span style="color:#666666"]]*[[/span]]reply_service [[span style="color:#666666"]]=[[/span]] zmsg_pop (msg);
{{@@            @@}}assert (zframe_streq (reply_service, service));
{{@@            @@}}zframe_destroy ([[span style="color:#666666"]]&[[/span]]reply_service);

{{@@            @@}}zmsg_destroy ([[span style="color:#666666"]]&[[/span]]request);
{{@@            @@}}[[span style="color:#008000"]]**return**[[/span]] msg;{{@@     @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Success//[[/span]]
{{@@        @@}}}
{{@@        @@}}[[span style="color:#008000"]]**else**[[/span]]
{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] ([[span style="color:#666666"]]@@--@@[[/span]]retries_left) {
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]verbose)
{{@@                @@}}zclock_log ([[span style="color:#BA2121"]]"W: no reply, reconnecting..."[[/span]]);
{{@@            @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Reconnect socket//[[/span]]
{{@@            @@}}s_mdcli_connect_to_broker (self);
{{@@        @@}}}
{{@@        @@}}[[span style="color:#008000"]]**else**[[/span]] {
{{@@            @@}}[[span style="color:#008000"]]**if**[[/span]] (self[[span style="color:#666666"]]->[[/span]]verbose)
{{@@                @@}}zclock_log ([[span style="color:#BA2121"]]"W: permanent error, abandoning"[[/span]]);
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];{{@@          @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Give up//[[/span]]
{{@@        @@}}}
{{@@    @@}}}
{{@@    @@}}[[span style="color:#008000"]]**if**[[/span]] (zctx_interrupted)
{{@@        @@}}printf ([[span style="color:#BA2121"]]"W: interrupt received, killing client...[[/span]][[span style="color:#BB6622"]]**\n**[[/span]][[span style="color:#BA2121"]]"[[/span]]);
{{@@    @@}}zmsg_destroy ([[span style="color:#666666"]]&[[/span]]request);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#008000"]]NULL[[/span]];
}
[[/div]]