[[div class="code"]]
[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@
@@//@@{{@@  @@}}Publisher for durable subscriber
@@//@@[[/span]][[/span]]
[[span style="color:#BC7A00"]]#include "zhelpers.h"[[/span]]

[[span style="color:#B00040"]]int[[/span]] [[span style="color:#0000FF"]]main[[/span]] ([[span style="color:#B00040"]]void[[/span]]) 
{
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]context [[span style="color:#666666"]]=[[/span]] zmq_init ([[span style="color:#666666"]]1[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Subscriber tells us when it's ready here//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]sync [[span style="color:#666666"]]=[[/span]] zmq_socket (context, ZMQ_PULL);
{{@@    @@}}zmq_bind (sync, [[span style="color:#BA2121"]]"tcp:@@//@@*:5564"[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}We send updates via this socket//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]publisher [[span style="color:#666666"]]=[[/span]] zmq_socket (context, ZMQ_PUB);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Prevent publisher overflow from slow subscribers//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]uint64_t[[/span]] hwm [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
{{@@    @@}}zmq_setsockopt (publisher, ZMQ_HWM, [[span style="color:#666666"]]&[[/span]]hwm, [[span style="color:#008000"]]**sizeof**[[/span]] (hwm));

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Specify swap space in bytes, this covers all subscribers//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]uint64_t[[/span]] swap [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]25000000[[/span]];
{{@@    @@}}zmq_setsockopt (publisher, ZMQ_SWAP, [[span style="color:#666666"]]&[[/span]]swap, [[span style="color:#008000"]]**sizeof**[[/span]] (swap));
{{@@    @@}}zmq_bind (publisher, [[span style="color:#BA2121"]]"tcp:@@//@@*:5565"[[/span]]);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Wait for synchronization request//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]char[[/span]] [[span style="color:#666666"]]*[[/span]]string [[span style="color:#666666"]]=[[/span]] s_recv (sync);
{{@@    @@}}free (string);

{{@@    @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Now broadcast exactly 10 updates with pause//[[/span]]
{{@@    @@}}[[span style="color:#B00040"]]int[[/span]] update_nbr;
{{@@    @@}}[[span style="color:#008000"]]**for**[[/span]] (update_nbr [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]]; update_nbr [[span style="color:#666666"]]<[[/span]] [[span style="color:#666666"]]10[[/span]]; update_nbr[[span style="color:#666666"]]++[[/span]]) {
{{@@        @@}}[[span style="color:#B00040"]]char[[/span]] string @@[@@[[span style="color:#666666"]]20[[/span]]@@]@@;
{{@@        @@}}sprintf (string, [[span style="color:#BA2121"]]"Update %d"[[/span]], update_nbr);
{{@@        @@}}s_send (publisher, string);
{{@@        @@}}sleep ([[span style="color:#666666"]]1[[/span]]);
{{@@    @@}}}
{{@@    @@}}s_send (publisher, [[span style="color:#BA2121"]]"END"[[/span]]);

{{@@    @@}}zmq_close (sync);
{{@@    @@}}zmq_close (publisher);
{{@@    @@}}zmq_term (context);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#666666"]]0[[/span]];
}
[[/div]]