[[div class="code"]]
[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@
@@//@@{{@@  @@}}Shows how to handle Ctrl-C
@@//@@[[/span]][[/span]]
[[span style="color:#BC7A00"]]#include <zmq.h>
#include <stdio.h>
#include <signal.h>[[/span]]

[[span style="color:#408080"]][[span style="font-style:italic"]]@@//@@{{@@  @@}}@@---------------------------------------------------------------------@@
@@//@@{{@@  @@}}Signal handling
@@//@@
@@//@@{{@@  @@}}Call s_catch_signals() in your application at startup, and then exit 
@@//@@{{@@  @@}}your main loop if s_interrupted is ever 1. Works especially well with 
@@//@@{{@@  @@}}zmq_poll.[[/span]][[/span]]

[[span style="color:#008000"]]**static**[[/span]] [[span style="color:#B00040"]]int[[/span]] s_interrupted [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]];
[[span style="color:#008000"]]**static**[[/span]] [[span style="color:#B00040"]]void[[/span]] [[span style="color:#0000FF"]]s_signal_handler[[/span]] ([[span style="color:#B00040"]]int[[/span]] signal_value)
{
{{@@    @@}}s_interrupted [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]1[[/span]];
}

[[span style="color:#008000"]]**static**[[/span]] [[span style="color:#B00040"]]void[[/span]] [[span style="color:#0000FF"]]s_catch_signals[[/span]] ([[span style="color:#B00040"]]void[[/span]])
{
{{@@    @@}}[[span style="color:#008000"]]**struct**[[/span]] sigaction action;
{{@@    @@}}action.sa_handler [[span style="color:#666666"]]=[[/span]] s_signal_handler;
{{@@    @@}}action.sa_flags [[span style="color:#666666"]]=[[/span]] [[span style="color:#666666"]]0[[/span]];
{{@@    @@}}sigemptyset ([[span style="color:#666666"]]&[[/span]]action.sa_mask);
{{@@    @@}}sigaction (SIGINT, [[span style="color:#666666"]]&[[/span]]action, [[span style="color:#008000"]]NULL[[/span]]);
{{@@    @@}}sigaction (SIGTERM, [[span style="color:#666666"]]&[[/span]]action, [[span style="color:#008000"]]NULL[[/span]]);
}

[[span style="color:#B00040"]]int[[/span]] [[span style="color:#0000FF"]]main[[/span]] ([[span style="color:#B00040"]]void[[/span]])
{
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]context [[span style="color:#666666"]]=[[/span]] zmq_init ([[span style="color:#666666"]]1[[/span]]);
{{@@    @@}}[[span style="color:#B00040"]]void[[/span]] [[span style="color:#666666"]]*[[/span]]socket [[span style="color:#666666"]]=[[/span]] zmq_socket (context, ZMQ_REP);
{{@@    @@}}zmq_bind (socket, [[span style="color:#BA2121"]]"tcp:@@//@@*:5555"[[/span]]);

{{@@    @@}}s_catch_signals ();
{{@@    @@}}[[span style="color:#008000"]]**while**[[/span]] ([[span style="color:#666666"]]1[[/span]]) {
{{@@        @@}}[[span style="color:#408080"]]//@@//@@{{@@  @@}}Blocking read will exit on a signal//[[/span]]
{{@@        @@}}zmq_msg_t message;
{{@@        @@}}zmq_msg_init ([[span style="color:#666666"]]&[[/span]]message);
{{@@        @@}}zmq_recv (socket, [[span style="color:#666666"]]&[[/span]]message, [[span style="color:#666666"]]0[[/span]]);

{{@@        @@}}[[span style="color:#008000"]]**if**[[/span]] (s_interrupted) {
{{@@            @@}}printf ([[span style="color:#BA2121"]]"W: interrupt received, killing server...[[/span]][[span style="color:#BB6622"]]**\n**[[/span]][[span style="color:#BA2121"]]"[[/span]]);
{{@@            @@}}[[span style="color:#008000"]]**break**[[/span]];
{{@@        @@}}}
{{@@    @@}}}
{{@@    @@}}zmq_close (socket);
{{@@    @@}}zmq_term (context);
{{@@    @@}}[[span style="color:#008000"]]**return**[[/span]] [[span style="color:#666666"]]0[[/span]];
}
[[/div]]